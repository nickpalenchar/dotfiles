# Set paths (Apple Silicon Homebrew first)
export PATH="/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/bin"

# Set default editor to Vim
export EDITOR="vim"

# History settings
HISTFILE=~/.zsh_history
HISTSIZE=5000
SAVEHIST=5000
setopt appendhistory        # Append history instead of overwriting
setopt sharehistory         # Share command history between sessions
setopt hist_ignore_all_dups # Ignore duplicate commands
setopt hist_expire_dups_first # Expire duplicate commands first

# Enable case-insensitive autocompletion
autoload -Uz compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Prompt settings (New line, background colors, Git branch, and triangle at the end)
NEWLINE=$'\n'
TRIANGLE='î­°'  # Nerd Font Powerline triangle

# Set up precmd hook to update prompt before each command
precmd() {
  __PROMPT_LAST_COLOR="yellow"

  ## Display current git branch if user is in a git repo
  GIT_BRANCH=""
  if command -v git &> /dev/null; then  # Check if git is installed
      local branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
      if [[ -n "$branch" ]]; then
          # Get status of working directory and staged files in one call
          local dirty=""
          local staged=""
          local git_status="$(git status --porcelain 2>/dev/null)"
          
          # Count staged files (lines starting with A, M, D, R, C)
          local staged_count=$(echo "$git_status" | grep -E '^[AMDRC]' | wc -l | tr -d '[:space:]')
          
          # Check if working directory is dirty (any status output)
          if [[ -n "$git_status" ]]; then
              dirty="*"
          fi
          
          if [[ $staged_count -gt 0 ]]; then
              staged="+${staged_count}"
          fi
          
          # Return both the branch info and set the color
          GIT_BRANCH="%K{magenta} $branch$dirty$staged %k"
          __PROMPT_LAST_COLOR="magenta"
      fi
  fi
  # Then construct the prompt using the updated color
  PROMPT="$NEWLINE%F{black}%K{blue} %n %k%K{yellow}%F{black} %~ %k%F{yellow}%f%K${GIT_BRANCH}%F{$__PROMPT_LAST_COLOR}$TRIANGLE %f"
}

# Alias setup
alias ss="source ~/.zshrc"
alias c='clear'
alias ll="ls -lah"
alias la="ls -A"
alias gs="git status"
alias gl="git pull"
alias ..="cd .."
alias ...="cd ../.."
alias ex="exit"
alias vimrc="vim ~/.zshrc"
alias M="git checkout main"
alias tf="terraform"
alias gd="git diff"
alias gds="git diff --staged"
# Git push to current branch
gpr() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if [[ -n "$current_branch" ]]; then
    git push origin "$current_branch"
  else
    echo "Not in a git repository"
  fi
}

# Fix pasting issues in terminal
setopt no_nomatch
setopt auto_cd # Allows you to type a directory name to `cd` into it

# Load add-zsh-hook
autoload -Uz add-zsh-hook

### Autosource nvm ###
load-nvmrc() {
  local nvmrc_path="$(pwd)/.nvmrc"

  # Check if there is a .nvmrc file
  if [[ -f "$nvmrc_path" ]]; then
    local node_version="$(nvm version)"
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

### nvm ###
export NVM_DIR="$HOME/.nvm"
([ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh")

source /Users/nick/.docker/init-zsh.sh || true # Added by Docker Desktop
